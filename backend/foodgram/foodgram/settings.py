"""
Django settings for foodgram project.

Generated by 'django-admin startproject' using Django 3.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/ 

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/ 
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Определяем корневую директорию проекта
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/ 

# SECURITY WARNING: keep the secret key used in production secret!
# Секретный ключ для подписи кук и других безопасных операций.
# В продакшене должен быть прочитан из переменной окружения или защищенного хранилища.
SECRET_KEY = os.getenv("SECRET_KEY", "")

# SECURITY WARNING: don't run with debug turned on in production!
# Режим отладки. В продакшене должен быть выключен (False).
DEBUG = os.getenv("DEBUG", "True") == "True"

# Список хостов, на которых может работать сайт. 
# Необходимо указывать в продакшене для защиты от атак через заголовок Host.
ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "backend",     # имя контейнера backend при использовании Docker
    "foodgram-backend",  # возможное доменное имя
]

# Настройки медиафайлов (загруженные пользователем)
MEDIA_URL = "/media/"  # URL-адрес, по которому будут доступны медиафайлы
MEDIA_ROOT = os.path.join(BASE_DIR, "media")  # Путь к каталогу, где будут храниться медиафайлы на сервере

# Настройки статических файлов (CSS, JS, изображения)
STATIC_URL = "/static/"  # URL-адрес, по которому будут доступны статические файлы
STATIC_ROOT = os.path.join(BASE_DIR, "static")  # Каталог, куда будет собираться collectstatic

# Application definition
# Список установленных приложений
INSTALLED_APPS = [
    # Приложения проекта
    "users.apps.UsersConfig",      # Настраиваемое приложение пользователей
    "recipes.apps.RecipesConfig",  # Приложение рецептов
    
    # Стандартные приложения Django
    "django.contrib.admin",        # Админка
    "django.contrib.auth",         # Система аутентификации
    "django.contrib.contenttypes", # Framework для типов контента
    "django.contrib.sessions",     # Управление сессиями
    "django.contrib.messages",     # Система сообщений
    "django.contrib.staticfiles",  # Обслуживание статических файлов
    
    # Третий сторонний код
    "rest_framework",              # Django REST framework
    "rest_framework_simplejwt",    # JWT-токены для аутентификации
    "djoser",                      # Библиотека для работы с пользователями в DRF
    "rest_framework.authtoken",    # Токен-аутентификация
]

# Промежуточные слои (middleware)
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",  # Безопасность
    "django.contrib.sessions.middleware.SessionMiddleware",  # Сессии
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Для эффективной раздачи статики
    "django.middleware.common.CommonMiddleware",     # Общие функции middleware
    "django.middleware.csrf.CsrfViewMiddleware",     # Защита от CSRF
    "django.contrib.auth.middleware.AuthenticationMiddleware",  # Аутентификация
    "django.contrib.messages.middleware.MessageMiddleware",     # Сообщения
    "django.middleware.clickjacking.XFrameOptionsMiddleware",   # Защита от clickjacking
]

# Корневой URLconf
ROOT_URLCONF = "foodgram.urls"

# Настройки шаблонизатора Django
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],  # Директории с шаблонами вне приложений
        "APP_DIRS": True,  # Искать шаблоны внутри приложений
        "OPTIONS": {
            "context_processors": [  # Контекстные процессоры
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI-приложение
WSGI_APPLICATION = "foodgram.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/ #databases

# Настройки подключения к базе данных
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",  # Используем PostgreSQL
        "NAME": os.getenv("DB_NAME", "foodgram"),       # Имя БД
        "USER": os.getenv("DB_USER", "postgres"),       # Пользователь
        "PASSWORD": os.getenv("DB_PASSWORD", "postgres"),  # Пароль
        "HOST": os.getenv("DB_HOST", "localhost"),       # Хост
        "PORT": os.getenv("DB_PORT", "5432"),            # Порт
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/ #auth-password-validators

# Валидаторы паролей
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Настройки Django REST Framework
REST_FRAMEWORK = {
    # Пагинация по умолчанию
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,  # По 10 записей на страницу
    
    # Классы аутентификации по умолчанию
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
    ),
    
    # Права доступа по умолчанию
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
}

# Настройки Djoser (авторизация и работа с пользователями)
DJOSER = {
    "HIDE_USERS": False,  # Не скрывать список пользователей
    "PERMISSIONS": {      # Разрешения для разных действий
        "current_user": ["rest_framework.permissions.IsAuthenticated"],
        "user_list": ["rest_framework.permissions.AllowAny"],
        "user": ["rest_framework.permissions.AllowAny"],
    },
    "SERIALIZERS": {      # Кастомные сериализаторы
        "user": "users.serializers.ProfileUserSerializer",
        "current_user": "users.serializers.ProfileUserSerializer",
    },
}

# Указываем свою модель пользователя
AUTH_USER_MODEL = "users.User"


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/ 

LANGUAGE_CODE = "en-us"  # Язык интерфейса
TIME_ZONE = "UTC"        # Часовой пояс
USE_I18N = True          # Включить мультиязычность
USE_L10N = True          # Локализация форматов дат/времени
USE_TZ = True            # Использовать временные зоны


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/ 

STATIC_URL = "/static/"  # URL для статики

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/ #default-auto-field

# Тип автоинкрементного первичного ключа
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"